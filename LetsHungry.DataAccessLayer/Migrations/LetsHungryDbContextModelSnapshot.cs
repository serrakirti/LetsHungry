// <auto-generated />
using System;
using LetsHungry.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsHungry.DataAccessLayer.Migrations
{
    [DbContext(typeof(LetsHungryDbContext))]
    partial class LetsHungryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LetsHungry.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kırmızı Et",
                            Title = "Et Yemekleri"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Meyveler",
                            Title = "Sebze Yemekleri"
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentDate = new DateTime(2022, 5, 11, 17, 55, 20, 733, DateTimeKind.Local).AddTicks(6273),
                            RestaurantId = 1,
                            Text = "Yemekten Böcek çıktı.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommentDate = new DateTime(2022, 5, 11, 17, 55, 20, 733, DateTimeKind.Local).AddTicks(6287),
                            RestaurantId = 2,
                            Text = "Yemekler soğuktu.",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mersin"
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinalPrice = 100m,
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            FinalPrice = 50m,
                            ProductId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Köri Soslu Tavuk",
                            Price = 42m,
                            ProductCategoryId = 1,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Barbekü Soslu Tavuk",
                            Price = 40m,
                            ProductCategoryId = 2,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Atıştırmalıklar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Atıştırmamalıklar"
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Raiting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HoldOnStar")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Raitings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HoldOnStar = 1,
                            RestaurantId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            HoldOnStar = 5,
                            RestaurantId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Gaziosmanpaşa",
                            CategoryId = 1,
                            Detail = "cafe-restaurant",
                            LocationId = 1,
                            Name = "Yeşilçam",
                            Tel = "02546569898"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Gaziosmanpaşa",
                            CategoryId = 2,
                            Detail = "cafe-restaurant",
                            LocationId = 2,
                            Name = "Times",
                            Tel = "02546569898"
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Rezervation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Guest")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RezervationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Rezervations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guest = 1,
                            OrderId = 1,
                            RestaurantId = 1,
                            RezervationDate = new DateTime(2022, 5, 11, 17, 55, 20, 733, DateTimeKind.Local).AddTicks(7049)
                        },
                        new
                        {
                            Id = 2,
                            Guest = 2,
                            OrderId = 2,
                            RestaurantId = 2,
                            RezervationDate = new DateTime(2022, 5, 11, 17, 55, 20, 733, DateTimeKind.Local).AddTicks(7055)
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "serra@gmail.com",
                            Name = "Serra",
                            Password = "1234",
                            Tel = "5555555555",
                            UserName = "Serra"
                        },
                        new
                        {
                            Id = 2,
                            Mail = "huseyin@gmail.com",
                            Name = "Hüseyin",
                            Password = "1234",
                            Tel = "1111111111",
                            UserName = "Huseyin"
                        });
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Comment", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.Restaurant", "Restaurant")
                        .WithMany("Comments")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Order", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Product", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.ProductCategory", "ProductCategories")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.Restaurant", "Restaurants")
                        .WithMany("Products")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCategories");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Raiting", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.Restaurant", "Restaurant")
                        .WithMany("Raitings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.User", "User")
                        .WithMany("Raitings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Restaurant", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.Category", "Category")
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.Location", "Location")
                        .WithMany("Restaurants")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Rezervation", b =>
                {
                    b.HasOne("LetsHungry.Core.Models.Order", "Order")
                        .WithMany("Rezervations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsHungry.Core.Models.Restaurant", "Restaurant")
                        .WithMany("Rezervations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Category", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Location", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Order", b =>
                {
                    b.Navigation("Rezervations");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.Restaurant", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Products");

                    b.Navigation("Raitings");

                    b.Navigation("Rezervations");
                });

            modelBuilder.Entity("LetsHungry.Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Raitings");
                });
#pragma warning restore 612, 618
        }
    }
}
